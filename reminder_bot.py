import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
import logging
import asyncio
import pytz

logging.basicConfig(level=logging.INFO)

API_TOKEN = "7561419022:AAEcftzg_YrAHkJMMbxAuZagCJqH_AAXd9s"

TIMEZONES = list(pytz.all_timezones)

COUNTRY_TIMEZONES = {
    "–†–æ—Å—Å–∏—è": "Europe/Moscow",
    "–°–®–ê": "America/New_York",
    "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": "Asia/Almaty",
    "–ö–∏—Ä–≥–∏–∑–∏—è": "Asia/Bishkek",
    "–ì–µ—Ä–º–∞–Ω–∏—è": "Europe/Berlin"
}

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()

# --- –†–∞–±–æ—Ç–∞ —Å –ë–î ---
class Database:
    def __init__(self, db_name="reminders.db"):
        self.db_name = db_name
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()
        self.init_db()

    def init_db(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS reminders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER,
                remind_time TEXT,
                text TEXT,
                status TEXT
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                timezone TEXT DEFAULT 'UTC'
            )
        ''')
        self.conn.commit()

        self.cursor.execute("PRAGMA table_info(users)")
        columns = [column[1] for column in self.cursor.fetchall()]
        if "timezone" not in columns:
            self.cursor.execute("ALTER TABLE users ADD COLUMN timezone TEXT DEFAULT 'UTC'")
            self.conn.commit()

    def add_reminder(self, chat_id, remind_time, text):
        """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO reminders (chat_id, remind_time, text, status) VALUES (?, ?, ?, ?)",
                           (chat_id, remind_time, text, "pending"))
            conn.commit()

    def get_pending_reminders(self, chat_id=None):
        """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            if chat_id:
                cursor.execute("SELECT * FROM reminders WHERE chat_id = ? AND status = 'pending'", (chat_id,))
            else:
                cursor.execute("SELECT * FROM reminders WHERE status = 'pending'")
            return cursor.fetchall()

    def update_reminder_status(self, reminder_id, status):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'completed')."""
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE reminders SET status = ? WHERE id = ?", (status, reminder_id))
            conn.commit()

    def update_user_timezone(self, user_id, timezone):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        query = "UPDATE users SET timezone = ? WHERE id = ?"
        self.cursor.execute(query, (timezone, user_id))
        self.connection.commit()

db = Database()

# --- FSM –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
class ReminderStates(StatesGroup):
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_text = State()

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def send_reminder(chat_id, text, reminder_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        await bot.send_message(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
        if reminder_id:
            db.update_reminder_status(reminder_id, "completed")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
def schedule_reminders():
    """–î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    reminders = db.get_pending_reminders()
    for reminder in reminders:
        try: 
            remind_time = datetime.strptime(reminder[2], "%Y-%m-%d %H:%M")
            scheduler.add_job(
                send_reminder, 
                DateTrigger(run_date=remind_time),
                args=[reminder[1], reminder[3], reminder[0]],
                misfire_grace_time=3600
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

def convert_to_utc(user_time: str, user_timezone: str) -> str:
    user_tz = pytz.timezone(user_timezone)
    local_time = datetime.strptime(user_time, "%Y-%m-%d %H:%M")
    local_time = user_tz.localize(local_time)
    utc_time = local_time.astimezone(pytz.utc)
    return utc_time.strftime("%Y-%m-%d %H:%M")

def convert_to_user_timezone(utc_time: str, user_timezone: str) -> str:
    user_tz = pytz.timezone(user_timezone)
    utc_dt = datetime.strptime(utc_time, "%Y-%m-%d %H:%M").replace(tzinfo=pytz.utc)
    local_dt = utc_dt.astimezone(user_tz)
    return local_dt.strftime("%Y-%m-%d %H:%M")

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
@dp.message(Command(commands=["start"]))
async def start(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' –∏ '–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), 
                KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), 
                KeyboardButton(text="–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            ],
            [KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")]
        ],
        resize_keyboard=True
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# --- –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def show_reminders(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    reminders = db.get_pending_reminders()
    if not reminders:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{rem[3]} ({rem[2]})", callback_data=f"delete_{rem[0]}")]
        for rem in reminders
    ])
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query(lambda call: call.data.startswith("delete_"))
async def delete_reminder(call: CallbackQuery):
    """–£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
    reminder_id = int(call.data.split("_")[1])
    with sqlite3.connect(db.db_name) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM reminders WHERE id = ?", (reminder_id,))
        conn.commit()

    await call.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
    await call.message.edit_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")

@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def start_reminder(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    await state.set_state(ReminderStates.waiting_for_date)

@dp.message(lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
async def set_timezone(message: types.Message):
    countries = list(COUNTRY_TIMEZONES.keys())

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=country)] for country in countries],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É:", reply_markup=keyboard)

@dp.message()
async def handle_timezone_selection(message: types.Message):
    country = message.text.strip()

    if country in COUNTRY_TIMEZONES:
        timezone = COUNTRY_TIMEZONES[country]
        await message.answer(f"–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone}")

        db.update_reminder_status(message.chat.id, timezone)

    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞.")

@dp.message()
async def save_timezone(message: types.Message):
    user_timezone = message.text.strip()

    if user_timezone in TIMEZONES:
        db.update_reminder_status(message.chat.id, user_timezone)
        await message.answer(f"–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {user_timezone}.")
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@dp.message(lambda message: message.text == "–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def my_reminders(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_reminders = db.get_pending_reminders(message.chat.id)
    reminders = db.get_pending_reminders(message.chat.id)

    if not user_reminders:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    
    reminders_text = "üìå –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    for reminder in reminders:
        local_time = convert_to_user_timezone(r[2], user_reminders)
        reminders_text += f"üïí {reminder[2]} - {local_time}\n"

    await message.answer(reminders_text)

@dp.message(ReminderStates.waiting_for_date)
async def input_date(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    try:
        date = datetime.strptime(message.text, "%Y-%m-%d")
        if date.date() < datetime.today().date():
            await message.answer("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        await state.update_data(remind_date=date.strftime("%Y-%m-%d"))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
        await state.set_state(ReminderStates.waiting_for_time)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(ReminderStates.waiting_for_time)
async def input_time(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    try:
        time = datetime.strptime(message.text, "%H:%M").time()
        await state.update_data(remind_time=time.strftime("%H:%M"))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        await state.set_state(ReminderStates.waiting_for_text)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(ReminderStates.waiting_for_text)
async def input_text(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ–≥–æ."""
    user_data = await state.get_data()
    remind_datetime = f"{user_data['remind_date']} {user_data['remind_time']}"

    try:
        remind_text_dt = datetime.strptime(remind_datetime, "%Y-%m-%d %H:%M")
        if remind_text_dt < datetime.now():
            await message.answer("–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    db.add_reminder(message.chat.id, remind_datetime, message.text)
    scheduler.add_job(send_reminder, DateTrigger(run_date=remind_text_dt), args=[message.chat.id, message.text])

    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {message.text} –≤ {remind_datetime}.")
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    schedule_reminders()
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
