import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.markdown import hbold
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
import logging
import asyncio
import pytz

logging.basicConfig(level=logging.INFO)

API_TOKEN = "7561419022:AAEcftzg_YrAHkJMMbxAuZagCJqH_AAXd9s"

TIMEZONES = list (map(str.capitalize, pytz.all_timezones))

COUNTRY_TIMEZONES = {
    "–†–æ—Å—Å–∏—è": ["Europe/Moscow", "Asia/Yekaterinburg", "Asia/Krasnoyarsk"],
    "–°–®–ê": ["America/New_York", "America/Chicago", "America/Los_Angeles"],
    "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": ["Asia/Almaty", "Asia/Aqtobe"],
    "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω": ["Asia/Bishkek"],
}

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

scheduler = AsyncIOScheduler()

# --- –†–∞–±–æ—Ç–∞ —Å –ë–î ---
class Database:
    def __init__(self, db_name="reminders.db"):
        self.db_name = db_name
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()
        self.init_db()

    def init_db(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS reminders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER,
                remind_time TEXT,
                text TEXT,
                status TEXT
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                timezone TEXT DEFAULT 'UTC'
            )
        ''')
        self.conn.commit()

        self.cursor.execute("PRAGMA table_info(users)")
        columns = [column[1] for column in self.cursor.fetchall()]
        if "timezone" not in columns:
            self.cursor.execute("ALTER TABLE users ADD COLUMN timezone TEXT DEFAULT 'UTC'")
            self.conn.commit()

    def add_reminder(self, chat_id, remind_datetime, text=None, voice_file_id=None):
        """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO reminders (chat_id, remind_datetime, text, status, voice_file_id)
                VALUES (?, ?, ?, ?, ?)
            """, (chat_id, remind_datetime, text, "pending", voice_file_id))
            conn.commit()

    def get_pending_reminders(self, chat_id=None):
        """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            if chat_id:
                cursor.execute("SELECT * FROM reminders WHERE chat_id = ? AND status = 'pending'", (chat_id,))
            else:
                cursor.execute("SELECT * FROM reminders WHERE status = 'pending'")
            return cursor.fetchall()

    def update_reminder_status(self, reminder_id, status):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'completed')."""
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE reminders SET status = ? WHERE id = ?", (status, reminder_id))
            conn.commit()

    def update_user_timezone(self, user_id, timezone):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        query = "UPDATE users SET timezone = ? WHERE user_id = ?"
        self.cursor.execute(query, (timezone, user_id))
        self.conn.commit()
        self.conn.close()

    def delete_reminder(self, reminder_id):
        self.cursor.execute("DELETE FROM reminders WHERE id = ?", (reminder_id,))
        self.conn.commit()

    def update_reminder_text(self, reminder_id: int, new_text: str):
        self.cursor.execute("UPDATE reminders SET text = ? WHERE id = ?", (new_text, reminder_id))
        self.conn.commit()
        self.conn.close

    def get_expired_reminders(self, now):
        self.cursor.execute("SELECT user_id, text, time FROM reminders WHERE time < ? AND sent = 0", (now,))
        return self.cursor.fetchall()

    def mark_reminder_as_sent(self, reminder_id):
        self.cursor.execute("UPDATE reminders SET sent = 1 WHERE id = ?", (reminder_id,))
        self.conn.commit()

db = Database()

# --- FSM –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
class ReminderStates(StatesGroup):
    waiting_for_country = State()
    waiting_for_timezone = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_text = State()
    waiting_for_note = State()

class EditReminderState(StatesGroup):
    waiting_for_new_text = State()
    waiting_for_new_voice = State()

user_timezones = {}

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def send_reminder(chat_id, text=None, voice_file_id=None, reminder_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        if text:
            await bot.send_message(chat_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\nüìå {text}")
        elif voice_file_id:
            await bot.send_voice(chat_id, voice_file_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω reminder_id
        if reminder_id:
            db.update_reminder_status(reminder_id, "completed")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
def schedule_reminders():
    """–î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    reminders = db.get_pending_reminders()
    for reminder in reminders:
        try: 
            remind_time = datetime.strptime(reminder[2], "%Y-%m-%d %H:%M")
            scheduler.add_job(
                lambda: asyncio.create_task(send_reminder(reminder[1], reminder[3], reminder[0])), 
                DateTrigger(run_date=remind_time),
                misfire_grace_time=3600
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

def convert_to_utc(user_time: str, user_timezone: str) -> str:
    try:
        user_tz = pytz.timezone(user_timezone)
        local_time = datetime.strptime(user_time, "%Y-%m-%d %H:%M")
        local_time = user_tz.localize(local_time)
        utc_time = local_time.astimezone(pytz.utc)
        return utc_time.strftime("%Y-%m-%d %H:%M")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ convert_to_utc: {e}")
        return user_time

def convert_to_user_timezone(utc_time, user_timezone):
    if not isinstance(user_timezone, str):
        print(f"–û—à–∏–±–∫–∞: user_timezone –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –∞ –Ω–µ {type(user_timezone)}")
        return utc_time
    
    try:
        user_tz = pytz.timezone(user_timezone)

        if isinstance(utc_time, str):
            utc_time = datetime.strptime(utc_time, "%Y-%m-%d %H:%M")
            utc_time = pytz.utc.localize(utc_time)

        return utc_time.astimezone(user_tz)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ convert_to_user_timezone: {e}")
        return utc_time

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
@dp.message(Command(commands=["start"]))
async def start(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' –∏ '–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'."""

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
                KeyboardButton(text="–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            ],
            [KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")]
        ],
        resize_keyboard=True
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    

@router.message(F.text == "–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def show_reminders(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    user_reminders = db.get_pending_reminders(message.from_user.id)

    if not user_reminders:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    
    for reminder in user_reminders:

        reminder_id, _, remind_time, text, _, voice_file_id = reminder

        inline_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º", callback_data=f"done_{reminder_id}"),
                    InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{reminder_id}"),
                    InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{reminder_id}")
                ]
            ]
        )

        if text:
            await message.answer(f"üìå {text}\n‚è∞ {remind_time}", reply_markup=inline_keyboard)
        elif voice_file_id:
            await message.answer_voice(voice_file_id, reply_markup=inline_keyboard)

@router.callback_query(F.data.startswith(("done_", "edit_", "delete_")))
async def reminder_action(callback_query: types.CallbackQuery, state: FSMContext):
    action, reminder_id = callback_query.data.split("_")
    reminder_id = int(reminder_id)

    if action == "done":
        await callback_query.message.edit_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
    elif action == "edit":
        await state.update_data(reminder_id=reminder_id)
        await state.set_state(EditReminderState.waiting_for_new_text)
        await callback_query.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:")
    elif action == "delete":
        db.delete_reminder(reminder_id)
        await callback_query.message.edit_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")

    await callback_query.answer()

@dp.callback_query(lambda call: call.data.startswith("delete_"))
async def delete_reminder(call: CallbackQuery):
    """–£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
    reminder_id = int(call.data.split("_")[1])
    with sqlite3.connect(db.db_name) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM reminders WHERE id = ?", (reminder_id,))
        conn.commit()

    await call.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
    await call.message.edit_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")

@router.message(EditReminderState.waiting_for_new_text)
async def process_new_text(message: Message, state: FSMContext):
    user_data = await state.get_data()
    reminder_id = user_data.get("reminder_id")

    if reminder_id is None:
        await message.answer("‚ö† –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    db.update_reminder_text(reminder_id, message.text)
    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {message.text}")
    await state.clear()

dp.include_router(router)

@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def start_reminder(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    await state.set_state(ReminderStates.waiting_for_date)

@dp.message(lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
async def set_timezone(message: types.Message):
    countries = list(COUNTRY_TIMEZONES.keys())

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=country)] for country in countries],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É:", reply_markup=keyboard)

@dp.message(lambda message: message.text in COUNTRY_TIMEZONES)
async def choose_timezone(message: types.Message, state: FSMContext):
    country = message.text
    timezones = COUNTRY_TIMEZONES[country]

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=tz)] for tz in timezones],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", reply_markup=keyboard)

@dp.message(lambda message: message.text in pytz.all_timezones)
async def save_timezone(message: types.Message, state: FSMContext):
    user_timezone = message.text.strip()

    await state.update_data(user_timezone=user_timezone)
    await message.answer(f"–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {user_timezone}.")
    await state.set_state(ReminderStates.waiting_for_date)
    await start(message)

logging.basicConfig(level=logging.DEBUG)

@dp.message(ReminderStates.waiting_for_date)
async def input_date(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    try:
        user_data = await state.get_data()
        user_timezone = user_data.get("user_timezone", "UTC")
        timezone = pytz.timezone(user_timezone)

        date = datetime.strptime(message.text, "%Y-%m-%d")
        date = timezone.localize(date)

        now = datetime.now(timezone)
        if date.date() < now.date():
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        await state.update_data(remind_date=date.strftime("%Y-%m-%d"))
        await message.answer("üìÖ –î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
        await state.set_state(ReminderStates.waiting_for_time)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(ReminderStates.waiting_for_time)
async def input_time(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    try:
        user_data = await state.get_data()
        user_timezone = user_data.get("user_timezone", "UTC")
        timezone = pytz.timezone(user_timezone)

        time = datetime.strptime(message.text, "%H:%M").time()

        remind_date = user_data.get("remind_date")
        if not remind_date:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            return
        
        remind_datetime = datetime.strptime(remind_date, "%Y-%m-%d").replace(
            hour=time.hour, minute=time.minute
        )

        remind_datetime = timezone.localize(remind_datetime)

        now = datetime.now(timezone)
        if remind_datetime < now:
            await message.answer("‚ùå –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        await state.update_data(remind_time=message.text, remind_datetime=remind_datetime.strftime("%Y-%m-%d %H:%M"))

        await message.answer("‚è≥ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        await state.set_state(ReminderStates.waiting_for_text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(ReminderStates.waiting_for_text)
async def input_text(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ–≥–æ."""
    if message.voice:
        voice_file_id = message.voice.file_id
        reminder_text = None
    elif message.text:
        reminder_text = message.text.strip()
        voice_file_id = None
    else:
        await message.asnwer("‚ùå –û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    
    data = await state.get_data()
    remind_datetime_str = data.get("remind_datetime")

    if not remind_datetime_str:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD HH:MM'.")
        return

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
        remind_datetime = datetime.strptime(remind_datetime_str, "%Y-%m-%d %H:%M")

        logging.debug(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text} –≤ {remind_datetime}")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.add_job(send_reminder, DateTrigger(run_date=remind_datetime), args=[message.chat.id, reminder_text, voice_file_id])

        db.add_reminder(message.chat.id, remind_datetime, reminder_text or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞", voice_file_id)

        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

async def restore_pending_reminders():
    now = datetime.now()
    expired_reminders = db.get_pending_reminders(now)

    for reminder in expired_reminders:
        user_id, text, reminder_time = reminder
        local_time = convert_to_user_timezone(reminder_time, "Europe/Moscow")

        message_text = (
            f"‚è≥ {hbold('–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!')}\n\n"
            f"{hbold('–¢–µ–∫—Å—Ç:')} {text}\n"
            f"{hbold('–û–∂–∏–¥–∞–ª–æ—Å—å –≤:')} {local_time.strftime('%Y-%m-%d %H:%M')}\n\n"
            "‚ö†Ô∏è –ë–æ—Ç –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω, –ø–æ—ç—Ç–æ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –≤–æ–≤—Ä–µ–º—è."
        )

        try:
            await bot.send_message(user_id, message_text)
            db.mark_reminder_as_sent(reminder[0])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder[0]}: {e}")

    print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

async def on_startup():
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    await restore_pending_reminders()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await on_startup()
    schedule_reminders()
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
    dp.run_polling(bot)